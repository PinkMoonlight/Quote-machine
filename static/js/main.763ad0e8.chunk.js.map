{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","loading","current","quote","author","onClick","getQuote","this","fetch","response","json","data","dataArray","setState","text","console","log","className","id","href","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gTA+DeA,G,kNA1DXC,MAAQ,CACNC,SAAS,EACTC,QAAS,EACTC,MAAO,KACPC,OAAQ,M,EA0BXC,QAAU,WACT,EAAKC,Y,sLAtBCJ,EAAUK,KAAKP,MAAME,QAEb,8B,SACWM,MADX,+B,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACAC,E,YAAgBD,GAEtBJ,KAAKM,SAAU,CACbV,MAAOS,EAAUV,GAASY,KAC1BV,OAAQQ,EAAUV,GAASE,OAC3BH,SAAS,EACTC,QAASA,EAAU,IACnBa,QAAQC,IAAIT,KAAKP,MAAME,S,2PAK3BK,KAAKD,W,qIASL,OACE,yBAAKW,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,GAAG,aACN,yBAAKD,UAAU,iBACb,uBAAGC,GAAG,QAAO,0BAAMD,UAAU,aAAhB,KAAb,IAAuDV,KAAKP,MAAMG,MAAlE,IAAyE,0BAAMc,UAAU,aAAhB,MACvE,0BAAMC,GAAG,UAAT,KAAqBX,KAAKP,MAAMI,SAEpC,yBAAKa,UAAU,gBACb,uBAAGE,KAAK,sCAAsCD,GAAG,eAAc,yBAAKD,UAAU,eAAeG,IAAI,cAAcC,IAAI,kBACnH,4BAAQH,GAAG,YAAYb,QAASE,KAAKF,SAArC,gBAIN,4BAAQY,UAAU,UAChB,uCAAY,uBAAGA,UAAU,YAAYE,KAAK,sBAA9B,sB,GApDJG,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.763ad0e8.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n    state = {\n      loading: true,\n      current: 0,\n      quote: null,\n      author: null\n    };\n\n /* Fetch  quote API */\n    async getQuote() {\n      let current = this.state.current;\n\n      const url = \"https://type.fit/api/quotes\";\n      const response = await fetch(url);\n      const data = await response.json();\n      const dataArray = [...data];\n\n      this.setState( {\n        quote: dataArray[current].text,\n        author: dataArray[current].author, \n        loading: false, \n        current: current + 1} );\n        console.log(this.state.current);\n  }\n  \n\n  async componentDidMount() {\n    this.getQuote();\n  };\n\n\n   onClick = () => {\n    this.getQuote()\n  };\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div id=\"quote-box\">\n            <div className=\"display-quote\">\n              <p id=\"text\"><span className=\"quotemark\">&#34;</span> {this.state.quote} <span className=\"quotemark\">&#34;</span></p>\n                <span id=\"author\">~ {this.state.author}</span>\n            </div>\n            <div className=\"interactions\">\n              <a href=\"http://www.twitter.com/intent/tweet\" id=\"tweet-quote\"><img className=\"twitter-icon\" src=\"twitter.png\" alt=\"Twitter Logo\" /></a>  \n              <button id=\"new-quote\" onClick={this.onClick} >New Quote</button>\n            </div>\n          </div>\n        </header>\n        <footer className=\"footer\">\n          <p>Built by <a className=\"name-link\" href=\"www.katecherie.com\">Kate Fisher</a></p>\n        </footer>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}